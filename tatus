warning: in the working copy of 'src/app.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/app.py b/src/app.py[m
[1mindex 25e369e..e51394d 100644[m
[1m--- a/src/app.py[m
[1m+++ b/src/app.py[m
[36m@@ -5,11 +5,13 @@[m [mimport sqlite3[m
 from encryption import encrypt_data, decrypt_data  # ‚úÖ Import encryption functions[m
 from session import session_expire_event, SessionManager  # ‚úÖ Import session expiration event[m
 from database import init_db, store_master_account, load_master_account, store_password, get_total_stored_passwords, update_password, delete_password, export_database[m
[32m+[m[32mfrom password_strength import PasswordStrengthAnalyzer[m
 [m
 # üîí Flask app setup[m
 app = Flask(__name__)[m
 app.secret_key = "supersecurekey"  # ‚úÖ Replace with a strong, secure key[m
 session_manager = SessionManager()  # üî• Create an instance[m
[32m+[m[32mpassword_analyzer = PasswordStrengthAnalyzer()  # üîê Password strength analyzer[m
 init_db()[m
 [m
 with open("../src/encryption_key.key", "rb") as f:[m
[36m@@ -284,5 +286,55 @@[m [mdef import_backup():[m
 [m
     return redirect(url_for('settings'))[m
 [m
[32m+[m[32m@app.route('/analyze_password', methods=['POST'])[m
[32m+[m[32mdef analyze_password():[m
[32m+[m[32m    """Analyzes password strength and returns analysis data."""[m
[32m+[m[32m    if "user_id" not in session:[m
[32m+[m[32m        return {"error": "Not authenticated"}, 401[m
[32m+[m[41m        [m
[32m+[m[32m    data = request.get_json()[m
[32m+[m[32m    password = data.get('password', '')[m
[32m+[m[41m    [m
[32m+[m[32m    analysis = password_analyzer.analyze_password(password)[m
[32m+[m[32m    return analysis[m
[32m+[m
[32m+[m[32m@app.route('/password_stats', methods=['GET'])[m
[32m+[m[32mdef get_password_stats():[m
[32m+[m[32m    """Gets password strength statistics for dashboard."""[m
[32m+[m[32m    if "user_id" not in session:[m
[32m+[m[32m        return {"error": "Not authenticated"}, 401[m
[32m+[m[41m        [m
[32m+[m[32m    try:[m
[32m+[m[32m        conn = get_db_connection()[m
[32m+[m[32m        cursor = conn.cursor()[m
[32m+[m[32m        cursor.execute("SELECT password FROM credentials")[m
[32m+[m[32m        passwords = cursor.fetchall()[m
[32m+[m[32m        conn.close()[m
[32m+[m[41m        [m
[32m+[m[32m        if not passwords:[m
[32m+[m[32m            return {"total": 0, "strength_distribution": {}, "average_entropy": 0}[m
[32m+[m[41m        [m
[32m+[m[32m        # Analyze all passwords[m
[32m+[m[32m        strength_counts = {"Very Strong": 0, "Strong": 0, "Moderate": 0, "Weak": 0, "Very Weak": 0}[m
[32m+[m[32m        total_entropy = 0[m
[32m+[m[41m        [m
[32m+[m[32m        for row in passwords:[m
[32m+[m[32m            decrypted_password = decrypt_data(row[0])[m
[32m+[m[32m            analysis = password_analyzer.analyze_password(decrypted_password)[m
[32m+[m[32m            strength_counts[analysis['strength_level']] += 1[m
[32m+[m[32m            total_entropy += analysis['entropy'][m
[32m+[m[41m        [m
[32m+[m[32m        average_entropy = round(total_entropy / len(passwords), 2)[m
[32m+[m[41m        [m
[32m+[m[32m        return {[m
[32m+[m[32m            "total": len(passwords),[m
[32m+[m[32m            "strength_distribution": strength_counts,[m
[32m+[m[32m            "average_entropy": average_entropy[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"Error getting password stats: {e}")[m
[32m+[m[32m        return {"error": "Failed to get password statistics"}, 500[m
[32m+[m
 if __name__ == "__main__":[m
     app.run(debug=True)[m
\ No newline at end of file[m
